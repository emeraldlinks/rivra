import type { Component } from "ripple";
import { effect, track } from "ripple";
import { useRouter } from "../userouter";
import type { Route, RouterProp } from "../types";

export component Router({ routes }: RouterProp) {
  const router = useRouter();

  let currentPath = track<string | null>(null);
  let matched = track<Route | null>(null);

  // Client-only logic in an effect
  effect(() => {
    if (typeof window === "undefined") return;

    @currentPath = window.location.pathname;

    const handler = () => {
      @currentPath = window.location.pathname;
      @matched = null;
    };

    window.addEventListener("popstate", handler);
    window.addEventListener("pushstate", handler);
    window.addEventListener("replacestate", handler);

    return () => {
      window.removeEventListener("popstate", handler);
      window.removeEventListener("pushstate", handler);
      window.removeEventListener("replacestate", handler);
    };
  });

  // Recompute matched route when path changes
  effect(() => {
    if (@currentPath === null) return;
    @matched = routes.find(r => router.match(r.path, @currentPath.toString())) || null;
  });

  // Always render a template, SSR-safe
  if (@matched) {
    const Comp = @matched.component;
    <Comp />
  } else {
    <DefaultNotFound />
  }
}

component DefaultNotFound() {
  <div>{"404 Page not found"}</div>
}

export default Router;
